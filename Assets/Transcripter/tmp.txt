public void InitializeCMD()
    {
        cmd = new Process();
        cmd.StartInfo.FileName = "./python.exe";
        // cmd.StartInfo.RedirectStandardInput = true;
        cmd.StartInfo.RedirectStandardOutput = true;
        cmd.StartInfo.RedirectStandardError = true;
        cmd.StartInfo.CreateNoWindow = true;
        cmd.StartInfo.UseShellExecute = false;

        // svick | https://stackoverflow.com/a/10789196
        cmd.EnableRaisingEvents = true;
        cmd.Exited += (sender, args) =>
        {
            /*  tcs.SetResult(process.ExitCode);
              process.Dispose();*/
            PrintToOutput("Transcription completed");
            // print("Completed"); 
            string errors = cmd.StandardError.ReadToEnd();
            print("Is error null? " + string.IsNullOrEmpty(errors));
            PrintToOutput("Is error null? " + string.IsNullOrEmpty(errors));

           // if (!string.IsNullOrEmpty(errors))
                PrintToOutput(errors);
            print(errors);
            string results = cmd.StandardOutput.ReadToEnd();
            PrintToOutput("Is results null? " + string.IsNullOrEmpty(results));
            print("Is results null? " + string.IsNullOrEmpty(results));
            PrintToOutput(results);
            print(results);
            loading.enabled = false;
            //   cmd.StandardInput.Close();
        };
        PrintToOutput("CMD initialized successfully");
    }


void ProcessAudioToText()
    {
        loading.enabled = true;
        PrintToOutput(dropDownLanguages.itemText.text);
        float alpha = string.IsNullOrEmpty(alphaField.text) ? defaultOptions.alpha : float.Parse(alphaField.text);
        float beta = string.IsNullOrEmpty(betaField.text) ? defaultOptions.beta : float.Parse(betaField.text);
        string command = $"\"{Application.streamingAssetsPath}/Dependencies/client.py\"";
        command += " --extended";
        command += " --model " + $"\"{Application.streamingAssetsPath}/Languages/{dropDownLanguages.itemText.text}.pbmm\"";
        command += @" --scorer " + $"\"{Application.streamingAssetsPath}/Languages/German.scorer\"";
        command += " --audio " + $"\"{audioPath.text}\" --lm_alpha {alpha.ToString().Replace(",", ".")} --lm_beta {beta.ToString().Replace(",", ".")}";
        command += (!string.IsNullOrEmpty(outputPath.text) ? (" --output " + $"\"{outputPath.text}\"") : "");
        command += (!string.IsNullOrEmpty(outputFilename.text) && CheckRegex(outputFilename.text, regexValidName) ? (" --srt_name " + outputFilename.text) : "");
        PrintToOutput("Executed: python " + command);
        cmd.StartInfo.Arguments = command;
        bool started = cmd.Start();
        if (started)
            PrintToOutput("Process successfully started");
        else
            PrintToOutput("Process could not be started", true);
        // cmd.StandardInput.WriteLine(@"deepspeech --model .\Languages\German.pbmm --scorer .\Languages\German.scorer --audio " + clip);
        //  cmd.StandardInput.Flush();
        if (fakeVideoPanel.activeSelf && fakeVideoToggle.isOn)
        {
            GenerateFakeVideo();
        }



        // cmd.WaitForExit(30000);

        //return results;
    }


    // Credits Ogglas https://stackoverflow.com/a/32872174
    /*public string CMD(string command)
    {
        var results = "";
        var errors = "";

        Process cmd = new Process();
        cmd.StartInfo.FileName = "cmd.exe";
        cmd.StartInfo.RedirectStandardInput = true;
        cmd.StartInfo.RedirectStandardOutput = true;
        cmd.StartInfo.RedirectStandardError = true;
        cmd.StartInfo.CreateNoWindow = true;
        cmd.StartInfo.UseShellExecute = false;
        cmd.Start();

        cmd.StandardInput.WriteLine("cd " + Application.streamingAssetsPath);
        cmd.StandardInput.WriteLine(command);
        cmd.StandardInput.Flush();
        cmd.StandardInput.Close();
        cmd.WaitForExit(10000);
        errors = cmd.StandardError.ReadToEnd();
        if (!string.IsNullOrEmpty(errors))
            print(errors);
        results = cmd.StandardOutput.ReadToEnd();
        //print("Aqui");
        return results;
    }*/











    // cmd.WaitForExit(30000);

    //return results;


    /* public string Python(string command)
     {
         var psi = new ProcessStartInfo();
         psi.FileName = @"python.exe";
         //var script = @".\Assets\HelloWorld.py";

         //psi.Arguments = $"\"{command}\"";
         psi.Arguments = $"\"{command}\"";
         psi.UseShellExecute = false;
         psi.CreateNoWindow = true;
         psi.RedirectStandardOutput = true;
         psi.RedirectStandardError = true;

         var results = "";
         var errors = "";
         using (var process = Process.Start(psi))
         {
             errors = process.StandardError.ReadToEnd();
             if (!string.IsNullOrEmpty(errors))
                 print(errors);
             results = process.StandardOutput.ReadToEnd();
         }
         // print(errors);
         return results;

     }*/









DENTRO DEL MÉTODO DE SELECCION DE ARCHIVOS
// Dialog is closed
        // Print whether the user has selected some files/folders or cancelled the operation (FileBrowser.Success)

// Print paths of the selected files (FileBrowser.Result) (null, if FileBrowser.Success is false)
            // for (int i = 0; i < FileBrowser.Result.Length; i++)
            //    print(FileBrowser.Result[i]);

            // Read the bytes of the first file via FileBrowserHelpers
            // Contrary to File.ReadAllBytes, this function works on Android 10+, as well
            //byte[] bytes = FileBrowserHelpers.ReadBytesFromFile(FileBrowser.Result[0]);

            // Or, copy the first file to persistentDataPath
            //string destinationPath = Path.Combine(Application.persistentDataPath, FileBrowserHelpers.GetFilename(FileBrowser.Result[0]));
            //AudioClip clip = (AudioClip) Resources.Load(FileBrowser.Result[0]);

            //ProcessAudioToText($"\"{FileBrowser.Result[0]}\"");

//print(Path.GetExtension(FileBrowser.Result[0]));
                    //MimeMapping.MimeUtility.GetMimeMapping(FileBrowser.Result[0]) == "Audio"
                  

            // FileBrowserHelpers.CopyFile(FileBrowser.Result[0], destinationPath);
        

DENTRO DEL MÉTODO DE PROCESS AUDIO TO TEXT

        // cmd.StandardInput.WriteLine(@"deepspeech --model .\Languages\German.pbmm --scorer .\Languages\German.scorer --audio " + clip);
        //  cmd.StandardInput.Flush();



DENTRO DE START
//textMeshPro.text = Python(@".\Assets\HelloWorld.py", "");
        //print(CMD("deepspeech", "--model "));
        //  System.Diagnostics.Process.Start("explorer.exe", "/select," + path);
        //     ProcessAudioToText(@"Cari.wav");
        //print(CMD(@".\deepspeech.exe --model .\Languages\German.pbmm --scorer .\Languages\German.scorer --audio .\Cari.wav"));
    
      

